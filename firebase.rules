// Firestore Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users: Read own data, only create if authenticated (signup)
    match /users/{userId} {
      allow read: if request.auth != null;
      // Allow creation only if the user is authenticated and the document ID matches auth ID
      allow create: if request.auth != null && request.auth.uid == userId 
                    && request.resource.data.id == userId
                    && request.resource.data.role in ['organizer', 'sponsor'];
      // Allow update only by the owner, prevent changing role or id after creation
      allow update: if request.auth != null && request.auth.uid == userId
                    && request.resource.data.id == userId
                    && request.resource.data.role == resource.data.role; 
      allow delete: if false; // Prevent deleting user records for now
    }
    
    // Organizers Profile: Read allowed by anyone logged in, Write only by owner
    match /organizers/{userId} {
      allow read: if request.auth != null;
      // Allow create if the user is authenticated and matches the document ID
      allow create: if request.auth != null && request.auth.uid == userId 
                    && request.resource.data.id == userId;
      // Allow update only if the user is authenticated and matches the document ID
      allow update: if request.auth != null && request.auth.uid == userId 
                    && request.resource.data.id == userId;
      allow delete: if false;
    }
    
    // Sponsors Profile: Read allowed by anyone logged in, Write only by owner
    match /sponsors/{userId} {
      allow read: if request.auth != null;
      // Allow create if the user is authenticated and matches the document ID
      allow create: if request.auth != null && request.auth.uid == userId 
                    && request.resource.data.id == userId;
      // Allow update only if the user is authenticated and matches the document ID
      allow update: if request.auth != null && request.auth.uid == userId 
                    && request.resource.data.id == userId;
      allow delete: if false;
    }
    
    // Posts: Logged-in users can read/create. Only creator can update/delete.
    match /posts/{postId} {
      allow read: if request.auth != null;
      // Allow create only if authenticated and the data contains the correct userId
      allow create: if request.auth != null 
                    && request.resource.data.userId == request.auth.uid;
      // Allow update/delete only if authenticated and the user is the owner
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Comments within posts
      match /comments/{commentId} {
        allow read;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }
    }
    
    // Notifications: Only the recipient can read/update (mark as read)
    match /notifications/{notificationId} {
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      // Allow creation if authenticated
      allow create: if request.auth != null; 
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Chat rooms
    match /chatRooms/{roomId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null && request.auth.uid in resource.data.participants;
      
      // Messages in chat rooms
      match /messages/{messageId} {
        allow read: if request.auth != null && 
                    request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants;
        allow create: if request.auth != null && 
                      request.auth.uid == request.resource.data.senderId &&
                      request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants;
        allow update: if request.auth != null && 
                      (request.resource.data.read == true || request.auth.uid == resource.data.senderId);
      }
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Realtime Database Rules
{
  "rules": {
    "chats": {
      "$roomId": {
        ".read": "auth != null && data.child('participants').child(auth.uid).exists()",
        ".write": "auth != null && 
                   (data.child('participants').child(auth.uid).exists() || 
                    !data.exists())",
        "messages": {
          "$messageId": {
            ".read": "auth != null && 
                      (data.child('senderId').val() == auth.uid || 
                       data.child('receiverId').val() == auth.uid)",
            ".write": "auth != null && 
                       (newData.child('senderId').val() == auth.uid)"
          }
        }
      }
    }
  }
}

// Storage Rules
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Profile images
    match /profileImages/{userId}/{allPaths=**} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Post media
    match /postMedia/{userId}/{allPaths=**} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chat file attachments
    match /chatFiles/{userId}/{allPaths=**} {
      allow read: if request.auth != null && 
                    (request.auth.uid == userId || 
                     resource.metadata.receiverId == request.auth.uid);
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
} 